version: 2.1

orbs:
  android: circleci/android@3.1.0
  gradle: circleci/gradle@3.0.0

executors:
  android-docker:
    docker:
      - image: cimg/android:2025.04
    resource_class: xlarge
  ios-executor:
    macos:
      xcode: "15.2.0"
      resource_class: m2pro.large

commands:
  install-android-sdk-manager:
    description: "Install Android SDK Manager"
    parameters:
      cache_prefix:
        type: string
        default: v1-android
      cache_enabled:
        type: boolean
        default: true
    steps:
      - when:
          condition: << parameters.cache_enabled >>
          steps:
            - restore_cache:
                keys:
                  - << parameters.cache_prefix >>-homebrew-{{ .Branch }}
                  - << parameters.cache_prefix >>-homebrew
      - run:
          name: Install Android SDK Manager
          command: |  
            brew install --cask temurin || true
            echo "Temurin installed"
            brew install --cask android-commandlinetools || true  
            echo "Android SDK Manager installed"
            echo 'export PATH=/opt/homebrew/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - when:
          condition: << parameters.cache_enabled >>
          steps:
            - save_cache:
                paths:
                  - /usr/local/Homebrew
                  - ~/Library/Caches/Homebrew
                key: << parameters.cache_prefix >>-homebrew-{{ .Branch }}

  setup-android-sdk:
    description: "Setup Android SDK"
    steps:
      - run:
          name: Set ANDROID_HOME and PATH
          command: |
            echo 'export ANDROID_HOME=/opt/homebrew/share/android-commandlinetools' >> $BASH_ENV
            echo 'export ANDROID_SDK_ROOT=/opt/homebrew/share/android-commandlinetools' >> $BASH_ENV
            source $BASH_ENV
            echo "ANDROID_HOME: $ANDROID_HOME"
            echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
            echo "PATH: $PATH"
      - run:
          name: Install Android SDK
          command: |
            yes | sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" || if [ $? -ne '141' ]; then exit $?; fi;  #Captures SIGPIPE 141 error but still allow repeating "y" to accept all licenses
            echo "Android SDK installed"
      - run:
          name: Accept Android SDK Licenses
          command: |
            yes | sdkmanager --licenses || if [ $? -ne '141' ]; then exit $?; fi;  #Captures SIGPIPE 141 error but still allow repeating "y" to accept all licenses

jobs:
  shared_build:
    executor: ios-executor
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - install-android-sdk-manager:
          cache_prefix: v1-android
      - setup-android-sdk
      - android/restore_gradle_cache:
          cache_prefix: v6-shared
      - run:
          name: Build shared module for all platforms
          command: |
            ./gradlew :shared:build :shared:test
      - run:
          name: List shared test results and reports
          command: |
            ls -l shared/build/test-results || true
            ls -l shared/build/reports/tests || true
      - android/save_gradle_cache:
          cache_prefix: v6-shared
      - store_artifacts:
          path: shared/build/reports
          destination: shared-module-reports
      # - store_test_results:
      #     path: shared/build/test-results
      - store_artifacts:
          path: build/reports/configuration-cache
          destination: configuration-cache-report
      - persist_to_workspace:
          root: .
          paths:
            - shared/build
            - shared/src
            - .gradle

  android_build_and_test:
    executor: android-docker
    steps:
      - checkout
      - attach_workspace:
          at: .
      - android/restore_build_cache
      - android/restore_gradle_cache:
          cache_prefix: v6-android
      - run:
          name: Build and test Android app
          command: ./gradlew androidApp:assembleDebug androidApp:testDebugUnitTest
      - android/save_build_cache
      - android/save_gradle_cache:
          cache_prefix: v6-android
      - store_artifacts:
          path: androidApp/build/reports/tests
          destination: android-test-reports
      - store_artifacts:
          path: androidApp/build/outputs/apk
          destination: android-apk
      - store_test_results:
          path: androidApp/build/test-results

  ios_build_and_test:
    executor: ios-executor
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-gem-cache-{{ arch }}
            - v1-gem-cache
      - run:
          name: Install xcpretty
          command: |
            gem install xcpretty
      - save_cache:
          paths:
            - ~/.gem
          key: v1-gem-cache-{{ arch }}
      - run:
          name: Build iOS app
          command: |
            xcodebuild -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              build
      - run:
          name: Run iOS tests
          command: |
            set -o pipefail && \
            xcodebuild test -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
              -destination-timeout 60 \
              IPHONEOS_DEPLOYMENT_TARGET=14.0 | xcpretty --report junit --output iosApp/iosApp/build/junit.xml
      - store_test_results:
          path: iosApp/iosApp/build/junit.xml
      - store_artifacts:
          path: iosApp/iosApp/build/junit.xml
          destination: ios-junit-report
      - store_artifacts:
          path: derivedData/Build/Products/Debug-iphonesimulator/iosApp.app
          destination: ios-app

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Dummy deploy
          command: echo "Deploy step (replace with real deployment)"

workflows:
  version: 2
  build_and_test:
    jobs:
      - shared_build
      - android_build_and_test:
          requires:
            - shared_build
      - ios_build_and_test:
          requires:
            - shared_build
      - deploy:
          requires:
            - android_build_and_test
            - ios_build_and_test 